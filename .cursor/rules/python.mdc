---
description: Python coding standards and best practices for the Amazon Product Search project
globs: ["**/*.py"]
alwaysApply: false
---

# Amazon Product Search - Python Rules

## Architecture Guidelines
- Follow modular architecture with clear separation of concerns
- Use dependency injection for external services (Elasticsearch, models)
- Keep business logic separate from infrastructure concerns

## Code Organization
- Each package should have its own `pyproject.toml` for dependencies
- Place tests in `tests/` directories mirroring source structure
- Use `__init__.py` files to define package APIs

## Development Commands
- `make lint` - Run linting and type checking (includes ruff)
- `poetry install` - Install project dependencies
- `poetry run pytest` - Run tests with pytest

## Code Style & Linting (Ruff - 120 char line length, Python 3.11)
- **Quotes**: Double quotes for all strings, docstrings, multiline strings
- **Imports**: Sort alphabetically, group by type (stdlib → 3rd-party → 1st-party)
- **Naming**: PascalCase classes, snake_case functions/variables, UPPER_SNAKE_CASE constants
- **Type hints**: Use consistently for public APIs, import types under TYPE_CHECKING when needed
- **Pytest**: Use `@pytest.fixture`, descriptive test names starting with `test_`, group in `TestClass`
- **String formatting**: Prefer f-strings over `.format()` or `%`
- **Comparisons**: Use `isinstance()` not `type()`, `is/is not` for None
- **Functions**: Keep McCabe complexity < 10, avoid mutable default arguments

## Documentation
- Google-style docstrings for public functions/classes
- Use triple double-quotes: `"""This is a docstring."""`

## Testing Standards
- Use pytest framework with descriptive test names
- Mock external dependencies (ES client, models, etc.)
- Test both success and error cases

## Common Anti-Patterns to Avoid
- ❌ `from module import *` (use specific imports)
- ❌ Bare `except:` clauses (specify exception types)
- ❌ Mutable default arguments
- ❌ `lambda` assignments (use proper function definitions)
